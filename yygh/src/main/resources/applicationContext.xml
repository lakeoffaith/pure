<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->
	
	<!-- 2、添加SpringMVC驱动 -->
	 <mvc:annotation-driven/>
	 <!-- 3、静态资源兼容 -->
	 <mvc:default-servlet-handler/>
     <context:property-placeholder location="classpath:jdbc.properties" />  
	
	<!-- 必须配置 否则注解无效 -->
	<context:annotation-config /> 
	<context:component-scan base-package="com.ijoy"/>

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="mapperLocations"  value="classpath*:com/ijoy/**/mapper/*.xml"></property>
	    <property name="typeAliasesPackage" value="com.ijoy.gh.domain,com.ijoy.gh.query,com.ijoy.common.domain,com.ijoy.common.query"></property> 
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		 <property name="basePackage" value="com.ijoy.common.mapper;com.ijoy.gh.mapper"></property> 
	</bean>
	

	
	<!-- 1.事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<tx:advice id="txadvice" transaction-manager="transactionManager">
			<tx:attributes>
				<tx:method name="get*" propagation="SUPPORTS"/>
				<tx:method name="find*" propagation="SUPPORTS"/>
				<tx:method name="query*" propagation="SUPPORTS"/>
				<tx:method name="*"/>
			</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut expression="execution(* com.ijoy..service..*(..))" id="pointcut"/>
		<aop:advisor advice-ref="txadvice" pointcut-ref="pointcut"/>
	</aop:config>
	
	  <!-- 视图解析器:定义跳转的文件的前后缀 -->    
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">    
        <property name="prefix" value="/WEB-INF/views/" />    
        <property name="suffix" value=".jsp" />  <!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑  -->  
    </bean>  
	
	
	<!-- <bean id="systemLogUtils" class="cn.ijoy.utils.SystemLogUtils">
	</bean>
	<aop:config>
		<aop:pointcut expression="execution(* cn.ijoy.service..*(..))" id="systemLogPointcut"/>
		<aop:aspect ref="systemLogUtils">
			<aop:after method="writerLog" pointcut-ref="systemLogPointcut"/>
		</aop:aspect>
	</aop:config> -->
	
	<!--配置拦截器, 多个拦截器,顺序执行 
    <mvc:interceptors>    
        <mvc:interceptor>    
            匹配的是url路径    
            <mvc:mapping path="/hospital" />  
      <mvc:mapping path="/user/**" />  
            <mvc:mapping path="/test/**" />   
              
            <bean class="com.ijoy.common.interceptor.QueryTransferIterceptor"></bean>    
        </mvc:interceptor>  
      当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 
    </mvc:interceptors>    -->
	  <!-- 5、文件上传 -->
	 <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	 	<!-- 如果在Spring配置文件中，做运算？？？  
	 		需要使用Spring的表达式语法！！  -->
	 	<property name="maxUploadSize" value="#{8*1024*1024}"></property>
	 	<!-- <property name="maxUploadSize" value="8388608"></property> -->
	 </bean>
</beans>
